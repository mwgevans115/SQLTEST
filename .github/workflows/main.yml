# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
name: Test for PRs
# omitted, see above
jobs:
 sql-auth-tsqlt:
  name: Test installting tSQLt with SQL auth
  runs-on: ubuntu-latest
  services:
    sqlserver:
      image: mcr.microsoft.com/mssql/server:2019-latest
      ports:
        - 1433:1433
      env:
        ACCEPT_EULA: Y
        SA_PASSWORD: Verystrongindeed123!
  steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Checkout tools repo
      uses: actions/checkout@v3
      with:
        repository: red-gate/SQLCop
        path: SQLCop
    - name: wait for SQL start
      shell: pwsh
      run: |
          $connectionString = 'Data Source={0};database={1};User ID={2};Password={3}' -f 'localhost','TargetDB','sa','Verystrongindeed123!'
          $sqlConnection = New-Object System.Data.SqlClient.SqlConnection $connectionString
          $retryCount= 5
          while ((-not $SqlConnection.State -eq 1) -and ($retryCount-ge 0)){
            try{
              $sqlConnection.Open()
            } catch {
              $e = $_
              Write-Host "Next attempt in 5 seconds"
              Start-Sleep -s 5
              $retrycount --
            }
          }
          $SQLConnection.Close()
          exit
          $Command = New-Object System.Data.SQLClient.SQLCommand
          $Command.Connection = $sqlConnection
          #$Command.CommandText = "INSERT INTO FileSizeTable (FileName,FileSize,FileNameLength,Date) VALUES (@name,@size,@length,@dt)";
          #$Command.CommandText = "CREATE DATABASE TARGETDB";
          $files | % {
            $_.Name
            $Query = get-content $_ -raw
            $Query
            $Command.CommandText = $Query
            #$Command.ExecuteNonQuery();
          }
          #$MyQuery = get-content "e:\SQLQuery1.sql";
          #$Command.Parameters.Add("@name", $i);
          #$Command.Parameters.Add("@size", $items);
          #$Command.Parameters.Add("@length", $temp);
          #$Command.Parameters.Add("@dt", $currentdate);
          #$Command.ExecuteNonQuery();
          #$sqlConnection = New-Object System.Data.SqlClient.SqlConnection $connectionString
          #$sqlConnection.Open()
          $sqlConnection.Close()
      shell: bash
    - name: Set environment variable ENV_CONTAINER_ID
      run: echo "ENV_CONTAINER_ID=$(docker ps --all --filter status=running --no-trunc --format "{{.ID}}")" >> $GITHUB_ENV
    - name: CreateTargetDB
      run: docker exec -i $ENV_CONTAINER_ID /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P Verystrongindeed123! -Q "CREATE DATABASE TargetDB"

    - name: Install tSQLt with SQL auth
      uses: lowlydba/tsqlt-installer@v1
      with:
        sql-instance: localhost
        database: TargetDB
        version: latest
        user: sa
        password: Verystrongindeed123!
    - name: Install SQLCop
      shell: pwsh
      run: |
          $files = Get-ChildItem SQLCop/Current/*.sql
          $connectionString = 'Data Source={0};database={1};User ID={2};Password={3}' -f 'localhost','TargetDB','sa','Verystrongindeed123!'
          $sqlConnection = New-Object System.Data.SqlClient.SqlConnection $connectionString
          $sqlConnection.Open()
          $Command = New-Object System.Data.SQLClient.SQLCommand
          $Command.Connection = $sqlConnection
          #$Command.CommandText = "INSERT INTO FileSizeTable (FileName,FileSize,FileNameLength,Date) VALUES (@name,@size,@length,@dt)";
          #$Command.CommandText = "CREATE DATABASE TARGETDB";
          $files | % {
            $_.Name
            $Query = get-content $_ -raw
            $Query
            $Command.CommandText = $Query
            #$Command.ExecuteNonQuery();
          }
          #$MyQuery = get-content "e:\SQLQuery1.sql";
          #$Command.Parameters.Add("@name", $i);
          #$Command.Parameters.Add("@size", $items);
          #$Command.Parameters.Add("@length", $temp);
          #$Command.Parameters.Add("@dt", $currentdate);
          #$Command.ExecuteNonQuery();
          #$sqlConnection = New-Object System.Data.SqlClient.SqlConnection $connectionString
          #$sqlConnection.Open()
          $sqlConnection.Close()
    - name: Powershell SQLServer Module Install
      shell: pwsh
      run: |
         Install-Module -Name SqlServer -Force
         $Params=@{
            ServerInstance='localhost'
            Database='TargetDB'
            Username='sa'
            Password='Verystrongindeed123!'
         }
         Invoke-Sqlcmd -Query 'CREATE SCHEMA SQLCop'  @Params -TrustServerCertificate
         $files = Get-ChildItem SQLCop/Current/*.sql
         $files | % {
            $_.Name
            
            $connectionString = 'Data Source={0};database={1};User ID={2};Password={3}' -f 'localhost','TargetDB','sa','Verystrongindeed123!'
            Invoke-Sqlcmd -InputFile $_.FullName @Params -TrustServerCertificate
          }
          Invoke-Sqlcmd -Query "Exec tsqlt.run sqlcop" @Params -TrustServerCertificate
